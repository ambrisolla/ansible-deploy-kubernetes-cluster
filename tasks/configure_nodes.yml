---

- name: Configure /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[item].ansible_host }} {{ item }}"
  with_items: "{{ groups['all'] }}"

- name: Configure Kubernetes repository
  ansible.builtin.yum_repository:
    name: kubernetes
    description: Kubernetes
    file: kubernetes
    baseurl: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/
    gpgcheck: 1
    exclude: kubelet kubeadm kubectl cri-tools kubernetes-cni
    enabled: 1
    gpgkey: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key

- name: Set SELinux to permissive mode
  ansible.builtin.selinux:
    state: disabled

- name: Disable firewalld
  ansible.builtin.systemd:
    name: firewalld
    enabled: false
    state: stopped

- name: Install packages
  ansible.builtin.yum:
    name:
      - kubelet
      - kubeadm
      - kubectl
      - tar
      - wget
      - runc
    disable_excludes: kubernetes


- name: Enable kubelet service
  ansible.builtin.systemd:
    name: kubelet
    enabled: True

- name: Enable overlay module
  ansible.builtin.modprobe:
    name: overlay
    state: present

- name: Enable overlay br_netfilter module
  ansible.builtin.modprobe:
    name: br_netfilter
    state: present

- name: Configure sysctl net.bridge.bridge-nf-call-iptables
  ansible.builtin.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_file: k8s.conf
    sysctl_set: True

- name: Configure sysctl net.bridge.bridge-nf-call-ip6tables
  ansible.builtin.sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: 1
    sysctl_file: k8s.conf
    sysctl_set: True

- name: Configure sysctl net.ipv4.ip_forward
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: 1
    sysctl_file: k8s.conf
    sysctl_set: True

- name: Download containerd
  ansible.builtin.get_url:
    url: https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz
    dest: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz

- name: Unarchive containerd files
  ansible.builtin.unarchive:
    src: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
    dest: /usr/local
    remote_src: yes

- name: Create Containerd config directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory

- name: Configure Containerd
  ansible.builtin.copy:
    src: files/config.toml
    dest: /etc/containerd/config.toml

- name: Configure Containerd service
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    dest: /etc/systemd/system/containerd.service

- name: Enable containerd service
  ansible.builtin.systemd:
    name: containerd
    enabled: True
    state: started
    daemon_reload: True

- name: Download CNI plugins files
  ansible.builtin.get_url:
    url: https://github.com/containernetworking/plugins/releases/download/v{{ cni_plugins_version }}/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
    dest: /tmp/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz

- name: Create CNI plugins directory
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory

- name: Unarchive CNI plugins
  ansible.builtin.unarchive:
    src: /tmp/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
    dest: /opt/cni/bin
    remote_src: yes

- name: Check if cluster is configured
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: cluster_is_configured